const SHEET_ID = "18PQ4jiE2cr-BMdDTSNgVytE1OIzm74JNTGBH8n9YtG8";

function jsonpResponse(callback, payload) {
  return ContentService
    .createTextOutput(`${callback}(${JSON.stringify(payload)})`)
    .setMimeType(ContentService.MimeType.JAVASCRIPT);
}

function doGet(e) {
  const mode = e.parameter.mode;
  const callback = e.parameter.callback || "handlePostResponse";

  switch (mode) {
    case "breakfastSubmit":
      return handleBreakfastSubmit(e, callback);
    case "verifyReservation":
      return handleVerifyReservation(e, callback);
    // case "searchName":
    //   return handleSearchByName(e, callback);
    case "searchRoom":
      return handleSearchByRoom(e, callback);
    case "importCsv":
      return handleImportCsv(e, callback);
    case "fetchStats":
      return handleFetchStats(e, callback);
    case "guestNameList":
      return handleGuestNameList(e, callback);
    case "guestFullList":
      return handleGuestFullList(e, callback);
    case "reservationList":
      return handleReservationList(e, callback);
    default:
      return handleDefault(e, callback);
  }
}

function handleBreakfastSubmit(e, callback) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("breakfast_list");
    if (!sheet) throw new Error("breakfast_list not found");
    Logger.log("🟡 조식 데이터 기록 시도:", e.parameter);
    // Set number format of column 1 (timestamp) to plain text before writing values
    const lastRow = sheet.getLastRow() + 1;
    sheet.getRange(lastRow, 1).setNumberFormat('@');
    sheet.getRange(lastRow, 1, 1, 3).setValues([[e.parameter.timestamp, e.parameter.room, e.parameter.guests]]);
    Logger.log("🟢 setValues 완료");
    return jsonpResponse(callback, { success: true });
  } catch (err) {
    Logger.log("❌ 조식 기록 에러:", err);
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}

function handleVerifyReservation(e, callback) {
  try {
    const reservationToVerify = e.parameter.verifyReservation.trim().toLowerCase().split(/[-_]/)[0];
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
    if (!sheet) throw new Error("guest_list not found");
    const data = sheet.getDataRange().getValues();
    // Collect logs for response
    const logs = [];
    logs.push("🔍 확인할 예약번호 (from JS): '" + reservationToVerify + "'");
    for (let i = 1; i < data.length; i++) {
      const reservation = String(data[i][0]).trim().toLowerCase();
      logs.push("🔎 row[" + i + "]: '" + reservation + "'");
    }
    const match = data.find((row, index) => {
      if (index === 0) return false;
      const rowReservation = String(row[0]).trim().toLowerCase().split(/[-_]/)[0];
      return rowReservation === reservationToVerify;
    });
    const breakfastFlag = match ? String(match[6]) : null;
    return jsonpResponse(callback, {
      success: true,
      exists: !!match,
      reservationToVerify,
      matchedReservation: match ? String(match[0]) : null,
      breakfastFlag,
      logs
    });
  } catch (err) {
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}

// function handleSearchByName(e, callback) {
//   try {
//     const searchKey = e.parameter.name.toLowerCase().replace(/\s+/g, '');
//     const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
//     if (!sheet) throw new Error("guest_list not found");
//     const data = sheet.getDataRange().getValues();
//     const matches = data.filter((row, index) => {
//       if (index === 0) return false;
//       const rowKey = (row[7] || "").toLowerCase().replace(/\s+/g, '');
//       return rowKey.includes(searchKey);
//     }).map(row => ({
//       reservation: row[0],
//       room: row[1],
//       name: row[2],
//       checkIn: row[3],
//       checkOut: row[4],
//       guestCount: row[5],
//       breakfastFlag: row[6],
//       searchName: row[7],
//       unpaid: row[8],
//       memo: row[9]
//     }));
//     return jsonpResponse(callback, { success: true, matches });
//   } catch (err) {
//     return jsonpResponse(callback, { success: false, error: err.message });
//   }
// }

function handleSearchByRoom(e, callback) {
  try {
    const searchKey = e.parameter.room.toLowerCase().replace(/\s+/g, '');
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
    if (!sheet) throw new Error("guest_list not found");
    const data = sheet.getDataRange().getValues();
    const matches = data.filter((row, index) => {
      if (index === 0) return false;
      const rowKey = String(row[1] || "").toLowerCase().replace(/\s+/g, '');
      return rowKey.includes(searchKey);
    }).map(row => ({
      reservation: row[0],
      room: row[1],
      name: row[2],
      checkIn: row[3],
      checkOut: row[4],
      guestCount: row[5],
      breakfastFlag: row[6],
      searchName: row[7],
      unpaid: row[8],
      memo: row[9]
    }));
    return jsonpResponse(callback, { success: true, matches });
  } catch (err) {
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}

function handleImportCsv(e, callback) {
  const csvData = e.parameter.csv;
  const command = e.parameter.command;

  if (command !== "clear" && !csvData) {
    return jsonpResponse(callback, { success: false, error: "Missing csv parameter" });
  }

  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
    if (!sheet) throw new Error("guest_list not found");

    if (command === "clear") {
      if (sheet.getLastRow() > 1) {
        sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).clearContent();
      }
      return jsonpResponse(callback, { success: true, cleared: true });
    }

    const rows = csvData.trim().split(';').map(line => {
      const [reservation, room, name, checkIn, checkOut, guestCount, breakfastFlag, searchName, hash, unpaid, memo] = line.split(',');
      return [reservation, room, name, checkIn, checkOut, guestCount, breakfastFlag, searchName, hash, unpaid, memo];
    });

    // Set number format to plain text for columns 1, 3, 4, 5, 8, 10 before inserting values
    const lastRow = sheet.getLastRow() + 1;
    const numRows = rows.length;
    const textColumns = [1, 3, 4, 5, 8, 10]; // 1-based column indices
    textColumns.forEach(function(col) {
      sheet.getRange(lastRow, col, numRows, 1).setNumberFormat('@');
    });

    sheet.getRange(lastRow, 1, numRows, rows[0].length).setValues(rows);
    return jsonpResponse(callback, { success: true, inserted: rows.length });
  } catch (err) {
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}

function handleDefault(e, callback) {
  return jsonpResponse(callback, { success: false, error: "Invalid mode or missing parameters" });
}

function handleFetchStats(e, callback) {
  try {
    const startDate = e.parameter.startDate;
    const endDate = e.parameter.endDate;
    Logger.log("🔍 startDate: " + startDate);
    Logger.log("🔍 endDate: " + endDate);

    // 🔄 Clean old data in breakfast_list
    const now = new Date();
    const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
    const breakfastSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("breakfast_list");
    const breakfastData = breakfastSheet.getDataRange().getValues();
    const breakfastHeader = breakfastData[0];
    const breakfastRowsToKeep = [breakfastHeader];
    for (let i = 1; i < breakfastData.length; i++) {
      const [timestamp, room, guests] = breakfastData[i];
      if (!timestamp || !room || guests === "" || guests == null) continue;
      const ts = new Date(timestamp);
      const hour = ts.getHours() + ts.getMinutes() / 60;
      if (ts >= threeMonthsAgo && hour >= 6 && hour <= 11) {
        breakfastRowsToKeep.push(breakfastData[i]);
      }
    }
    breakfastSheet.clearContents();
    breakfastSheet.getRange(1, 1, breakfastRowsToKeep.length, breakfastHeader.length).setValues(breakfastRowsToKeep);

    // Now get the cleaned breakfast_list data for stats
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("breakfast_list");
    if (!sheet) throw new Error("breakfast_list not found");
    const data = sheet.getDataRange().getValues();
    const results = [];
    for (let i = 1; i < data.length; i++) {
      const [timestamp, room, guests] = data[i];
      if (!timestamp || !room || guests === "" || guests == null) continue;
      const date = Utilities.formatDate(new Date(timestamp), Session.getScriptTimeZone(), "yyyy-MM-dd");
      if (date >= startDate && date <= endDate) {
        results.push({ timestamp, date, room, guests: Number(guests) });
      }
    }

    // --- Calculate room-only guest stats by summing column 3 for matching dates ---
    let roomOnlyGuests = 0;
    const roomOnlySheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("room_only");
    const roomOnlyDataAll = roomOnlySheet.getDataRange().getValues();
    for (let i = 1; i < roomOnlyDataAll.length; i++) {
      const [rDate, , guestCountRaw] = roomOnlyDataAll[i];
      if (!rDate || guestCountRaw === "" || guestCountRaw == null) continue;
      const dateStr = Utilities.formatDate(new Date(rDate), Session.getScriptTimeZone(), "yyyy-MM-dd");
      if (dateStr === startDate || (dateStr >= startDate && dateStr <= endDate)) {
        const count = Number(guestCountRaw);
        if (!isNaN(count)) {
          roomOnlyGuests += count;
        }
      }
    }

    // Calculate totalRoom from guest_list: count rooms per day and sum across date range
    const guestSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
    const guestData = guestSheet.getDataRange().getValues();
    // Count total number of rooms per date, sum across date range
    const roomMapByDate = {};
    for (let i = 1; i < guestData.length; i++) {
      const room = guestData[i][1];
      const checkIn = guestData[i][3];
      const checkOut = guestData[i][4];
      if (!room || !checkIn || !checkOut) continue;

      let date = new Date(checkIn);
      const end = new Date(checkOut);
      while (date <= end) {
        const dateStr = Utilities.formatDate(date, Session.getScriptTimeZone(), "yyyy-MM-dd");
        if (dateStr >= startDate && dateStr <= endDate) {
          if (!roomMapByDate[dateStr]) roomMapByDate[dateStr] = new Set();
          roomMapByDate[dateStr].add(String(room).trim());
        }
        date.setDate(date.getDate() + 1);
      }
    }
    let totalRoom = 0;
    for (const rooms of Object.values(roomMapByDate)) {
      totalRoom += rooms.size;
    }

    // --- Calculate totalRoom from total_nm sheet for date range (compare text dates directly) ---
    const totalSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("total_nm");
    const totalData = totalSheet.getDataRange().getValues();
    Logger.log("🗒 total_nm 데이터 수: " + totalData.length);
    let totalRoomFromSheet = 0;
    for (let i = 1; i < totalData.length; i++) {
      const d = Utilities.formatDate(new Date(totalData[i][0]), Session.getScriptTimeZone(), "yyyy-MM-dd");
      const rowCount = Number(totalData[i][1]) || 0;
      if (d >= startDate && d <= endDate) {
        totalRoomFromSheet += rowCount;
      }
    }

    // --- Calculate breakfastGuests by summing column 3 for matching dates ---
    let breakfastGuests = 0;
    const breakfastSheetClean = SpreadsheetApp.openById(SHEET_ID).getSheetByName("breakfast_list");
    const breakfastDataAll = breakfastSheetClean.getDataRange().getValues();
    for (let i = 1; i < breakfastDataAll.length; i++) {
      const [timestamp, room, guestCountRaw] = breakfastDataAll[i];
      if (!timestamp || !room || guestCountRaw === "" || guestCountRaw == null) continue;
      const date = Utilities.formatDate(new Date(timestamp), Session.getScriptTimeZone(), "yyyy-MM-dd");
      if (date === startDate || (date >= startDate && date <= endDate)) {
        const count = Number(guestCountRaw);
        if (!isNaN(count)) {
          breakfastGuests += count;
        }
      }
    }

    Logger.log("🧪 최종 반환 데이터: " + JSON.stringify({
      breakfastGuests,
      totalRoom: totalRoomFromSheet,
      roomOnlyGuests: roomOnlyGuests,
      rowsCount: results.length
    }, null, 2));
    return jsonpResponse(callback, {
      success: true,
      rows: results,
      roomOnlyGuests: roomOnlyGuests,
      totalRoom: totalRoomFromSheet,
      breakfastGuests
    });
  } catch (err) {
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}

function handleGuestNameList(e, callback) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
    const data = sheet.getDataRange().getValues();
    const list = data.slice(1).map(row => ({
      name: row[2] || "",
      searchName: (row[7] || "").toLowerCase()
    }));
    return jsonpResponse(callback, { success: true, list });
  } catch (err) {
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}

function handleGuestFullList(e, callback) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
    const data = sheet.getDataRange().getValues();
    const fullList = data.slice(1).map(row => {
      const reservationRaw = String(row[0] || "").trim();
      const reservationKey = reservationRaw.split(/[-_]/)[0].toLowerCase();
      return {
        reservation: reservationRaw,
        reservationKey,
        room: row[1],
        name: row[2],
        checkIn: row[3],
        checkOut: row[4],
        guestCount: row[5],
        breakfastFlag: row[6],
        searchName: (row[7] || "").toLowerCase(),
        unpaid: row[8],
        memo: row[9]
      };
    });
    return jsonpResponse(callback, { success: true, list: fullList });
  } catch (err) {
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}

function handleReservationList(e, callback) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
    const data = sheet.getDataRange().getValues();
    const reservations = data.slice(1).map(row =>
      String(row[0] || "").trim().split(/[-_]/)[0].toLowerCase()
    );
    return jsonpResponse(callback, { success: true, reservations });
  } catch (err) {
    return jsonpResponse(callback, { success: false, error: err.message });
  }
}
// --- POST 업로드용 doPost(e) 함수 ---
function doPost(e) {
  Logger.log("📥 받은 POST 데이터: " + e.postData.contents);

  let body;
  try {
    body = JSON.parse(e.postData.contents || "{}");
  } catch (err) {
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: "Invalid JSON: " + err.message
    })).setMimeType(ContentService.MimeType.JSON);
  }

  const rows = body.rows;
  const roomOnlyData = body.roomOnly;

  const result = {
    guestUpload: null,
    roomOnlyUpload: null,
  };

  try {
    // --- guest_list 처리 ---
    if (rows) {
      const guestSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");

      // ✅ 기존 데이터 삭제 (헤더는 유지)
      if (guestSheet.getLastRow() > 1) {
        guestSheet.getRange(2, 1, guestSheet.getLastRow() - 1, guestSheet.getLastColumn()).clearContent();
      }

      const guestRows = rows.map(fields => {
        if (fields.length > 10) {
          fields[10] = fields[10].replace(/\\n/g, '\n');
        }
        return fields;
      });
      const guestLastRow = guestSheet.getLastRow() + 1;
      guestSheet.getRange(guestLastRow, 1, guestRows.length, guestRows[0].length)
        .setValues(guestRows)
        .setWrap(true);
      // --- Set number format to plain text for columns 1, 3, 4, 5, 8, 10 after setValues ---
      const textColumns = [1, 3, 4, 5, 8, 10]; // 1-based indices
      textColumns.forEach(function(col) {
        guestSheet.getRange(guestLastRow, col, guestRows.length, 1).setNumberFormat('@');
      });
      result.guestUpload = { success: true, inserted: guestRows.length };
    }

    // --- room_only 처리 ---
    if (roomOnlyData) {
      const roomSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("room_only");
      // Clear existing contents
      roomSheet.clearContents();
      // Write date in row 1, column 1
      const todayForRoom = new Date();
      todayForRoom.setDate(todayForRoom.getDate() + 1);
      const dateForRoom = Utilities.formatDate(todayForRoom, Session.getScriptTimeZone(), "yyyy-MM-dd");
      roomSheet.getRange(1, 1).setValue(dateForRoom);
      // Write room numbers in row 2, column 1 as comma-separated string
      const roomOnlyStr = roomOnlyData.trim();
      roomSheet.getRange(2, 1).setValue(roomOnlyStr);
      // Compute total guest count for room-only reservations
      let totalGuests = 0;
      if (rows) {
        const roomList = roomOnlyStr.split(",").map(r => r.trim());
        rows.forEach(function(r) {
          const roomNum = r[1]; // 방 번호 컬럼
          const guestsCount = Number(r[5]); // 고객수 컬럼 (대+소 합산으로 이미 처리됨)
          if (roomList.indexOf(roomNum) !== -1 && !isNaN(guestsCount)) {
            totalGuests += guestsCount;
          }
        });
      }
      // Write total guest count in row 3, column 1
      roomSheet.getRange(3, 1).setValue(totalGuests);
      result.roomOnlyUpload = { success: true, inserted: roomOnlyStr.split(",").length };
    }

    // --- total_nm 처리 (총 방 수 기록) ---
    try {
      const totalSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("total_nm");
      const today = new Date();
      today.setDate(today.getDate() + 1); // 하루 더함
      const dateStr = Utilities.formatDate(today, Session.getScriptTimeZone(), "yyyy-MM-dd");

      const guestSheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("guest_list");
      const lastRowGuest = guestSheet.getLastRow();
      let sumF = 0;
      if (lastRowGuest >= 2) {
        const valuesF = guestSheet.getRange(2, 6, lastRowGuest - 1, 1).getValues();
        valuesF.forEach(row => {
          const num = Number(row[0]);
          if (!isNaN(num)) sumF += num;
        });
      }
      const totalRows = sumF;

      const threeMonthsAgo = new Date(today.getFullYear(), today.getMonth() - 3, today.getDate());
      const totalData = totalSheet.getDataRange().getValues();
      const header = ["日付", "行数"];
      const filtered = [header];

      for (let i = 1; i < totalData.length; i++) {
        const d = new Date(totalData[i][0]);
        const dStr = Utilities.formatDate(d, Session.getScriptTimeZone(), "yyyy-MM-dd");
        if (!isNaN(d) && d >= threeMonthsAgo && dStr !== dateStr) {
          filtered.push(totalData[i]);
        }
      }

      const newRow = [dateStr, totalRows];
      const updated = [...filtered, newRow];
      totalSheet.clearContents();
      totalSheet.getRange(1, 1, updated.length, updated[0].length).setValues(updated);
    } catch (err) {
      Logger.log("❌ total_nm 처리 에러: " + err.message);
    }

    return ContentService.createTextOutput(JSON.stringify(result)).setMimeType(ContentService.MimeType.JSON);
  } catch (err) {
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: err.message,
      debug: {
        body,
        csvLength: csvData?.length || 0,
        roomOnlyLength: roomOnlyData?.length || 0
      }
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

function testFetchStats() {
  const e = {
    parameter: {
      mode: "fetchStats",
      callback: "handleStatsResponse",
      startDate: "2025-05-30",
      endDate: "2025-05-31"
    }
  };
  const result = handleFetchStats(e, e.parameter.callback);
  Logger.log("📦 결과 JSONP: " + result.getContent());
}
