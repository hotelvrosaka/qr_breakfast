const SCRIPT_BASE_URL = "https://script.google.com/macros/s/AKfycbydq0Sx4EDAb0eRbdmNwrSEZzCFAEmeiCLF5w7IxnsOdxGqBhi7ZyS4xee2SCTXpPcKaw/exec";
let reservationSet = new Set();

function preloadReservationList() {
  const callback = "handleReservationList";
  const query = `mode=reservationList&callback=${callback}`;
  const script = document.createElement("script");
  script.src = `${SCRIPT_BASE_URL}?${query}`;
  document.body.appendChild(script);
}

window.handleReservationList = function(response) {
  if (response.success && Array.isArray(response.reservations)) {
    reservationSet = new Set(response.reservations);
    console.log("üì• ÏòàÏïΩÎ≤àÌò∏ Î¶¨Ïä§Ìä∏ Î°úÏª¨Ïóê Ï†ÄÏû•Îê®:", reservationSet);
  } else {
    console.warn("‚ö†Ô∏è ÏòàÏïΩÎ≤àÌò∏ Î¶¨Ïä§Ìä∏ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®");
  }
};

document.addEventListener("DOMContentLoaded", () => {
  preloadReservationList();
  // --- Message strings for alerts ---
  const messages = {
    alreadyHadBreakfast: {
      ja: "„Åô„Åß„Å´ÊúùÈ£ü„ÇíÂè¨„Åó‰∏ä„Åå„Çä„Åæ„Åó„Åü„ÄÇ",
      en: "This room has already had breakfast."
    },
    roomOnly: {
      ja: "Room Only„Éó„É©„É≥„Åß„Åô„ÄÇ",
      en: "This room is a Room Only plan."
    },
    invalidQR: {
      ja: "QR„Ç≥„Éº„Éâ„ÅåÁÑ°Âäπ„Åß„Åô„ÄÇ",
      en: "Invalid QR code."
    },
    confirmAtFront: {
      ja: "„Åô„Åø„Åæ„Åõ„Çì„ÄÅ„Éï„É≠„É≥„Éà„Åß„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ",
      en: "Please check with the front desk."
    },
    enterGuests: {
      ja: "‰∫∫Êï∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      en: "Please enter the number of guests."
    },
    guestLimitExceeded: (max) => ({
      ja: `ÊúÄÂ§ß‰∫∫Êï∞„ÅØ${max}Âêç„Åß„Åô„ÄÇ`,
      en: `The maximum number of guests is ${max}.`
    })
  };
  // --- Helper to get current formatted time ---
  function getCurrentFormattedTime() {
    const now = new Date();
    const yyyy = now.getFullYear();
    const mm = String(now.getMonth() + 1).padStart(2, '0');
    const dd = String(now.getDate()).padStart(2, '0');
    const hh = String(now.getHours()).padStart(2, '0');
    const min = String(now.getMinutes()).padStart(2, '0');
    const sec = String(now.getSeconds()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${min}:${sec}`;
  }
  // --- Helper to update localStorage waitingList entry ---
  // Replaces/overwrites status "0" entry for this room if present.
  // If only status "1" entries exist, calculates totalGuestsSoFar, checks remaining, and inserts if possible.
  function updateLocalStorageEntry(room, guestsToAdd, timestamp, status = "0", totalFromQR = null) {
    const localData = JSON.parse(localStorage.getItem("waitingList") || "[]");

    // Check how many guests have already had breakfast (status "1")
    const totalGuestsSoFar = localData.reduce((sum, entry) => {
      const [r, g, , s] = entry.split(",");
      return (String(r) === String(room) && s === "1") ? sum + parseInt(g || "0") : sum;
    }, 0);

    let newGuests = parseInt(guestsToAdd);
    if (totalFromQR !== null) {
      const remaining = totalFromQR - totalGuestsSoFar;
      console.log(`[DEBUG] Room: ${room}, Total from QR: ${totalFromQR}, Already eaten: ${totalGuestsSoFar}, Remaining: ${remaining}`);
      if (remaining <= 0) {
        console.log(`[DEBUG] Skipping add: no guests remaining for room ${room}.`);
        return;
      }
      newGuests = Math.min(newGuests, remaining);
    }

    if (newGuests <= 0) {
      console.log(`[DEBUG] Skipping add: newGuests <= 0 for room ${room}.`);
      return;
    }

    const newData = `${room},${newGuests},${timestamp},0`;

    // Look for existing status "0" entry to overwrite
    const index = localData.findIndex(entry => {
      const [r, , , s] = entry.split(",");
      return String(r) === String(room) && s === "0";
    });

    if (index !== -1) {
      console.log(`[DEBUG] Overwriting existing status 0 entry for room ${room}`);
      localData[index] = newData;
    } else {
      console.log(`[DEBUG] Adding new status 0 entry for room ${room}`);
      localData.push(newData);
    }

    localStorage.setItem("waitingList", JSON.stringify(localData));
  }
  // --- Custom Alert Modal Helper ---
  window.showCustomAlert = function(message) {
    const overlay = document.createElement("div");
    overlay.className = "custom-alert-overlay";
    overlay.innerHTML = `
      <div class="custom-alert-box">
        <p>${message.replace(/\n/g, "<br>")}</p>
        <button id="customAlertClose">OK</button>
      </div>
    `;
    document.body.appendChild(overlay);

    const close = () => {
      if (overlay && overlay.parentNode) {
        overlay.remove();
      }
    };

    document.getElementById("customAlertClose").onclick = close;

    // Auto close after 3 seconds, except for guest list (#0) or messages with "Âêç"
    if (!message.includes("#0") && !message.includes("Âêç")) {
      setTimeout(close, 3000);
    }
  }
  // Prevent duplicate scans of the same QR code
  let lastScannedText = "";
  let lastScannedTime = 0;
  // --- Reusable QR scanner restart function ---
  function restartQrScanner() {
    html5QrCode.start(
      { facingMode: "user" },
      {
        fps: 15,
        qrbox: function(viewfinderWidth, viewfinderHeight) {
          const minEdge = Math.min(viewfinderWidth, viewfinderHeight);
          const boxSize = Math.floor(minEdge * 0.85);
          return { width: boxSize, height: boxSize };
        }
      },
      onScanSuccess
    ).catch(err => {
      console.error("QR„Çπ„Ç≠„É£„ÉäËµ∑Âãï„Ç®„É©„Éº:", err);
    });
  }
  document.getElementById("loadingOverlay").style.display = "none";
  const savedList = JSON.parse(localStorage.getItem("waitingList") || "[]");
  const today = new Date().toISOString().slice(0, 10); // "YYYY-MM-DD"
  // Remove entries not from today and not between 06:00 and 10:59
  const todayList = savedList.filter(entry => {
    const timestamp = entry.split(",")[2];
    const date = timestamp.slice(0, 10);
    const hour = parseInt(timestamp.slice(11, 13));
    return date === today && hour >= 6 && hour < 11;
  });
  localStorage.setItem("waitingList", JSON.stringify(todayList));
  const listContainer = document.getElementById("List");

  const waitingList = todayList.filter(entry => {
    const parts = entry.split(",");
    const [room, guests, timestamp, status] = parts;
    const entryDate = timestamp.slice(0, 10);
    const entryHour = parseInt(timestamp.slice(11, 13));
    return (
      status === "0" &&
      entryDate === today &&
      entryHour >= 6 &&
      entryHour < 11
    );
  });

  waitingList.sort((a, b) => {
    const timeA = new Date(a.split(",")[2]);
    const timeB = new Date(b.split(",")[2]);
    return timeA - timeB;
  });

  waitingList.forEach(entry => {
    const [room, guests, timestamp] = entry.split(",");
    const button = document.createElement("button");
    button.classList.add("dynamic-button");
    button.textContent = `${room}Âè∑ ${guests}Âêç`;
    button.onclick = () => {
      const localData = JSON.parse(localStorage.getItem("waitingList") || "[]");
      const index = localData.findIndex(entry => entry.split(",")[0] === room);
      if (index !== -1) {
        const [roomNum, guests, timestamp] = localData[index].split(",");
        const updatedEntry = `${roomNum},${guests},${timestamp},1`;
        localData[index] = updatedEntry;
        localStorage.setItem("waitingList", JSON.stringify(localData));
        // Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî Î∞è Ï†úÍ±∞
        button.disabled = true;
        button.style.opacity = "0.5";
        setTimeout(() => button.remove(), 300);

        // Send to Google Apps Script via JSONP
        console.log("üì§ ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°ÎêòÎäî Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏:", {
          room: roomNum,
          guests: guests,
          timestamp: timestamp
        });
        const query = new URLSearchParams({
          mode: "breakfastSubmit",
          callback: "handlePostResponse",
          room: roomNum,
          guests: guests,
          timestamp: timestamp
        });
        const jsonpScript = document.createElement("script");
        jsonpScript.src = `${SCRIPT_BASE_URL}?${query.toString()}`;
        document.body.appendChild(jsonpScript);
        // Restart QR scanner immediately after processing button click
        restartQrScanner();
      }
    };
    listContainer.appendChild(button);
  });

  // const SCRIPT_BASE_URL = "https://script.google.com/macros/s/AKfycbx2QKA2TI6_7Js9jNw1H5E0g12HNeXRSQSX8YCAL5MGHadyHlZF4cw0zyZiZ6DYgCwupQ/exec";
  const qrResult = document.getElementById("qrResult");
  const qrRegionId = "reader";
  const html5QrCode = new Html5Qrcode(qrRegionId);

  function onScanSuccess(decodedText, decodedResult) {
    const now = Date.now();
    if (decodedText === lastScannedText && now - lastScannedTime < 5000) return;
    lastScannedText = decodedText;
    lastScannedTime = now;
    console.log(`‚úÖ QR„Ç≥„Éº„Éâ„Çπ„Ç≠„É£„É≥ÊàêÂäü: ${decodedText}`);
    const qrResult = document.getElementById("qrResult");
    qrResult.value = decodedText;
    setTimeout(() => { qrResult.value = ""; }, 500);

    const parts = decodedText.split(",");
    if (parts.length !== 7) {
      showCustomAlert(`${messages.invalidQR.ja}\n${messages.invalidQR.en}`);
      return;
    }

    const [room, checkIn, checkOut, guests, reservation, breakfastFlag, hashFromQR] = parts;

    if (breakfastFlag !== "1") {
      showCustomAlert(`${room}Âè∑„ÅØ${messages.roomOnly.ja}\n${messages.roomOnly.en}`);
      lastScannedText = "";
      return;
    }

    generateHash({ room, checkIn, checkOut, guests, reservation, breakfastFlag }).then(calculatedHash => {
      if (calculatedHash !== hashFromQR) {
        showCustomAlert(`${messages.confirmAtFront.ja}\n${messages.confirmAtFront.en}`);
        lastScannedText = "";
        return;
      }

      const loading = document.getElementById("loadingOverlay");
      if (loading) loading.style.display = "flex";
      // --- Local lookup for reservation number in reservationSet ---
      const isValidReservation = reservationSet.has(reservation.toLowerCase().split(/[-_]/)[0]);

      if (!isValidReservation) {
        if (loading) loading.style.display = "none";
        showCustomAlert(`${messages.confirmAtFront.ja}\n${messages.confirmAtFront.en}`);
        lastScannedText = "";
        return;
      }
      if (loading) loading.style.display = "none";

      const localData = JSON.parse(localStorage.getItem("waitingList") || "[]");
      const matchingEntries = localData.filter(entry => entry.split(",")[0] === room);
      const totalGuestsSoFar = matchingEntries.reduce((sum, entry) => {
        const status = entry.split(",")[3];
        return sum + (status === "1" ? parseInt(entry.split(",")[1]) : 0);
      }, 0);

      const remainingGuests = parseInt(guests) - totalGuestsSoFar;
      if (remainingGuests <= 0) {
        showCustomAlert(`${room}Âè∑„ÅØ${messages.alreadyHadBreakfast.ja}\n${messages.alreadyHadBreakfast.en}`);
        lastScannedText = "";
        return;
      }

      window.currentRoomText = room;
      window.maxGuestsFromQR = remainingGuests;
      document.getElementById("guestCountInput").value = remainingGuests;
      document.getElementById("customPromptOverlay").style.display = "flex";
      const promptLabel = document.getElementById("customPromptLabel");
      if (promptLabel) {
        promptLabel.innerText = "ÊúùÈ£ü„ÇíÂèñ„Çã‰∫∫Êï∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\nPlease enter the number of guests for breakfast.";
      }
      const cancelBtn = document.getElementById("customPromptCancel");
      const confirmBtn = document.getElementById("customPromptConfirm");
      if (cancelBtn) cancelBtn.innerHTML = "„Ç≠„É£„É≥„Çª„É´<br>Cancel";
      if (confirmBtn) confirmBtn.innerHTML = "Á¢∫ÂÆö<br>Confirm";
      document.getElementById("guestCountInput").focus();

      const inputEl = document.getElementById("guestCountInput");
      const decreaseBtn = document.getElementById("decreaseGuestBtn");
      const increaseBtn = document.getElementById("increaseGuestBtn");

      decreaseBtn.onclick = () => {
        let val = parseInt(inputEl.value) || 1;
        if (val > 1) inputEl.value = val - 1;
      };
      increaseBtn.onclick = () => {
        let val = parseInt(inputEl.value) || 1;
        const max = window.maxGuestsFromQR || 10;
        if (val < max) inputEl.value = val + 1;
      };

      // Prevent zoom on double-tap for these buttons
      decreaseBtn.addEventListener("dblclick", (e) => e.preventDefault());
      increaseBtn.addEventListener("dblclick", (e) => e.preventDefault());
    });
  }

  async function generateHash({ room, checkIn, checkOut, guests, reservation, breakfastFlag }) {
    const secret = "HOTEL_ONLY_SECRET_KEY";
    const data = `${room},${checkIn},${checkOut},${guests},${reservation},${breakfastFlag}`;
    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(data + secret));
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('').slice(0, 8);
  }

  Html5Qrcode.getCameras().then(devices => {
    if (devices && devices.length > 0) {
      html5QrCode.start(
        { facingMode: "user" },
        {
          fps: 15,
          qrbox: function(viewfinderWidth, viewfinderHeight) {
            const minEdge = Math.min(viewfinderWidth, viewfinderHeight);
            const boxSize = Math.floor(minEdge * 0.85);
            return { width: boxSize, height: boxSize };
          }
        },
        onScanSuccess
      ).catch(err => {
        console.error("Camera start error:", err);
        qrResult.value = "„Ç´„É°„É©„ÅÆËµ∑Âãï„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ";
      });
    } else {
      qrResult.value = "„Ç´„É°„É©„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ";
    }
  }).catch(err => {
    console.error("Camera access error:", err);
    qrResult.value = "„Ç´„É°„É©„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ";
  });

  let count = 1;

  // Debug log Ï∂úÎ†•Ïö©
  function logDebug(msg) {
    const logBox = document.getElementById("debugLog");
    if (logBox) {
      const time = new Date().toLocaleTimeString();
      const entry = document.createElement("div");
      entry.textContent = `[${time}] ${msg}`;
      logBox.prepend(entry);
    }
  }

  const submitBtn = document.getElementById("searchButton");
  submitBtn.addEventListener("click", () => {
    const text = document.getElementById("qrResult").value.trim();
    if (!text) {
      showCustomAlert("QR„Ç≥„Éº„Éâ„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
      // Clear input field after processing
      document.getElementById("qrResult").value = "";
      // Restart QR scanner after search attempt
      restartQrScanner();
      return;
    }

    if (text.startsWith("#")) {
      if (text === "#0") {
        const allData = JSON.parse(localStorage.getItem("waitingList") || "[]");
        if (allData.length === 0) {
          showCustomAlert("„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ");
        } else {
          const display = allData.map(entry => {
            const parts = entry.split(",");
            const statusText = parts[3] === "1" ? "ÂÖ•Â†¥" : "ÂæÖÊ©ü";
            return `${parts[0]}Âè∑ ${parts[1]}Âêç ${parts[2]} (${statusText})`;
          }).join("\n");
          showCustomAlert(display);
          // The following block is intentionally commented out to prevent auto-close or auto-dismissal for #0
          /*
          const alertBox = document.querySelector(".custom-alert-overlay");
          if (alertBox) {
            const closeBtn = alertBox.querySelector("#customAlertClose");
            if (closeBtn) {
              closeBtn.onclick = () => {
                alertBox.remove();
              };
            }
          }
          */
        }
        // Clear input field after processing
        document.getElementById("qrResult").value = "";
        // Restart QR scanner after search attempt
        restartQrScanner();
        return;
      }

      const parts = text.substring(1).split(",");
      const command = parts[0];
      const room = parts[1];
      const guests = parts[2] || null;

      const listContainer = document.getElementById("List");
      const existingButton = Array.from(listContainer.children).find(btn =>
        btn.textContent.startsWith(`${room}Âè∑`)
      );

      if (command === "1") {
        if (!room || !guests) {
          showCustomAlert("ËøΩÂä†„Åô„Çã„Å´„ÅØÈÉ®Â±ãÁï™Âè∑„Å®‰∫∫Êï∞„ÅåÂøÖË¶Å„Åß„ÅôÔºà‰æã: #1,501,2Ôºâ");
          // Clear input field after processing
          document.getElementById("qrResult").value = "";
          // Restart QR scanner after search attempt
          restartQrScanner();
          return;
        }

        if (existingButton) {
          existingButton.textContent = `${room}Âè∑ ${guests}Âêç`;
        } else {
          const button = document.createElement("button");
          button.classList.add("dynamic-button");
          button.textContent = `${room}Âè∑ ${guests}Âêç`;
          button.onclick = () => {
            const localData = JSON.parse(localStorage.getItem("waitingList") || "[]");
            const index = localData.findIndex(entry => entry.split(",")[0] === room);
            if (index !== -1) {
              const [roomNum, guests, timestamp] = localData[index].split(",");
              const updatedEntry = `${roomNum},${guests},${timestamp},1`;
              localData[index] = updatedEntry;
              localStorage.setItem("waitingList", JSON.stringify(localData));
              // Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî Î∞è Ï†úÍ±∞
              button.disabled = true;
              button.style.opacity = "0.5";
              setTimeout(() => button.remove(), 300);

              // JSONP Î∞©ÏãùÏúºÎ°ú ÏÑúÎ≤ÑÏóê Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
              console.log("üì§ ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°ÎêòÎäî Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏:", {
                room: roomNum,
                guests: guests,
                timestamp: timestamp
              });
              const query = new URLSearchParams({
                mode: "breakfastSubmit",
                callback: "handlePostResponse",
                room: roomNum,
                guests: guests,
                timestamp: timestamp
              });
              const jsonpScript = document.createElement("script");
              jsonpScript.src = `${SCRIPT_BASE_URL}?${query.toString()}`;
              document.body.appendChild(jsonpScript);
            }
          };
          listContainer.appendChild(button);
        }

        // Save to localStorage
        const formattedTime = getCurrentFormattedTime();
        updateLocalStorageEntry(room, guests, formattedTime, "0");

        logDebug(`üü¢ ${room}Âè∑ ${guests}Âêç „ÇíÂæÖÊ©ü„É™„Çπ„Éà„Å´ËøΩÂä†„Åæ„Åü„ÅØÊõ¥Êñ∞`);
      } else if (command === "2") {
        if (!room) {
          showCustomAlert("„Ç≠„É£„É≥„Çª„É´„Å´„ÅØÈÉ®Â±ãÁï™Âè∑„ÅåÂøÖË¶Å„Åß„ÅôÔºà‰æã: #2,501Ôºâ");
          // Clear input field after processing
          document.getElementById("qrResult").value = "";
          // Restart QR scanner after search attempt
          restartQrScanner();
          return;
        }

        if (existingButton) {
          listContainer.removeChild(existingButton);
          logDebug(`üóëÔ∏è ${room}Âè∑ „ÇíÂæÖÊ©ü„É™„Çπ„Éà„Åã„ÇâÂâäÈô§`);
        } else {
          showCustomAlert(`${room}Âè∑ „ÅØÂæÖÊ©ü„É™„Çπ„Éà„Å´Â≠òÂú®„Åó„Åæ„Åõ„Çì`);
        }
      } else {
      showCustomAlert("‰∏çÊòé„Å™„Ç≥„Éû„É≥„Éâ„Åß„Åô„ÄÇ");
      }

      // Clear input field after processing
      document.getElementById("qrResult").value = "";
      // Restart QR scanner after search attempt
      restartQrScanner();
      return;
    }

    const parts = text.split(",");
    if (parts.length === 7) {
      // Destructure in the correct order including guests
      const [room, checkIn, checkOut, guests, reservation, breakfastFlag, hashFromQR] = parts;
      // Only pass the required fields (excluding guests) to generateHash
      generateHash({ room, checkIn, checkOut, reservation, breakfastFlag }).then(calculatedHash => {
        if (calculatedHash === hashFromQR) {
          logDebug("üü¢ QRÏΩîÎìú ÌòïÏãù Î∞è Ìï¥Ïãú ÏùºÏπò ‚Üí Í≤ÄÏÉâ Ïã§Ìñâ");
          window.currentRoomText = text;
          document.getElementById("customPromptOverlay").style.display = "flex";
          // Set prompt message in Japanese and English (2 lines)
          var promptLabel = document.getElementById("customPromptLabel");
          if (promptLabel) {
            promptLabel.innerText = "ÊúùÈ£ü„ÇíÂèñ„Çã‰∫∫Êï∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\nPlease enter the number of guests for breakfast.";
          }
          // Set custom prompt button labels (2 lines, Japanese + English)
          var cancelBtn = document.getElementById("customPromptCancel");
          var confirmBtn = document.getElementById("customPromptConfirm");
          if (cancelBtn) cancelBtn.innerHTML = "„Ç≠„É£„É≥„Çª„É´<br>Cancel";
          if (confirmBtn) confirmBtn.innerHTML = "Á¢∫ÂÆö<br>Confirm";
        } else {
          logDebug("‚ùå QRÏΩîÎìú Ìï¥Ïãú Î∂àÏùºÏπò ‚Üí Í≤ÄÏÉâ Ï∞®Îã®");
          showCustomAlert(`${messages.invalidQR.ja}\n${messages.invalidQR.en}`);
        }
        // Clear input field after processing
        document.getElementById("qrResult").value = "";
        // Restart QR scanner after search attempt
        restartQrScanner();
      });
    } else {
      logDebug("‚ö†Ô∏è QRÏΩîÎìú ÌòïÏãù ÏïÑÎãò ‚Üí Í≤ÄÏÉâ Ï∞®Îã®");
      showCustomAlert("QR„Ç≥„Éº„Éâ„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ");
      // Clear input field after processing
      document.getElementById("qrResult").value = "";
      // Restart QR scanner after search attempt
      restartQrScanner();
    }
  });

  // ‚úÖ Enter, Return, Go, Done, Next ÌÇ§ ÏûÖÎ†• Ïãú Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïã§Ìñâ (iPad/iOS ÌÇ§Î≥¥Îìú ÎåÄÏùë)
  document.addEventListener("keydown", (e) => {
    console.log("Pressed key:", e.key); // ÏΩòÏÜîÏóê ÌÇ§ Ï∂úÎ†•
    if (
      ["Enter", "Return", "Go", "Done", "Next"].includes(e.key) &&
      document.activeElement?.id === "qrResult"
    ) {
      console.log("üîç Ê§úÁ¥¢„Éú„Çø„É≥„ÇíÂÆüË°å„Åó„Åæ„Åô");
      e.preventDefault();
      document.getElementById("searchButton").click();
      document.activeElement.blur(); // ÌÇ§Î≥¥Îìú Îã´Í∏∞
    }
  });

  // ‚úÖ ÏûÖÎ†• Ïô∏Ïùò ÏòÅÏó≠ÏùÑ ÌÑ∞ÏπòÌïòÎ©¥ ÌÇ§Î≥¥Îìú Îã´Í∏∞
  document.addEventListener("touchstart", (e) => {
    const active = document.activeElement;
    if (
      active &&
      (active.tagName === "INPUT" || active.tagName === "TEXTAREA") &&
      !e.target.closest("input") &&
      !e.target.closest("textarea")
    ) { 
      // Delay blur slightly to ensure compatibility with iPadOS event processing
      setTimeout(() => {
        active.blur();
      }, 50);
    }
  });

  // ‚úÖ ÏûÖÎ†• ÌïÑÎìú Ìè¨Ïª§Ïä§/Ìè¨Ïª§Ïä§ÏïÑÏõÉ Ïãú Ïä§ÌÅ¨Î°§ Ï†úÏñ¥ Í∞úÏÑ†
  let lastScrollY = 0;

  document.addEventListener("focusin", () => {
    lastScrollY = window.scrollY;
  });

  document.addEventListener("focusout", () => {
    setTimeout(() => {
      // ÌÇ§Î≥¥Îìú ÎÇ¥Î†§Í∞Ñ Îí§ÏóêÎèÑ ÏàòÎèô Ïä§ÌÅ¨Î°§Ìïú Ï†Å ÏóÜÏúºÎ©¥ Î≥µÏõê
      if (window.scrollY > lastScrollY + 50) return; // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÎÇ¥Î¶∞ Í≤ΩÏö∞ Í±¥ÎìúÎ¶¨ÏßÄ ÏïäÏùå
      window.scrollTo({ top: lastScrollY, behavior: "smooth" });
    }, 200);
  });
  // --- Helper functions for custom guest count modal ---
  window.submitGuestCount = function() {
    const guests = document.getElementById("guestCountInput").value;
    if (!guests) {
      showCustomAlert(`${messages.enterGuests.ja}\n${messages.enterGuests.en}`);
      return;
    }
    if (window.maxGuestsFromQR && parseInt(guests) > window.maxGuestsFromQR) {
      showCustomAlert(`${messages.guestLimitExceeded(window.maxGuestsFromQR).ja}\n${messages.guestLimitExceeded(window.maxGuestsFromQR).en}`);
      return;
    }

    const room = window.currentRoomText || "";
    const button = document.createElement("button");
    button.classList.add("dynamic-button");
    button.textContent = `${room}Âè∑ ${guests}Âêç`;
    button.onclick = () => {
      const localData = JSON.parse(localStorage.getItem("waitingList") || "[]");
      // Only match entry with status "0"
      const index = localData.findIndex(entry => {
        const [r, , , s] = entry.split(",");
        return r === room && s === "0";
      });
      if (index !== -1) {
        const [roomNum, guests, timestamp] = localData[index].split(",");
        const updatedEntry = `${roomNum},${guests},${timestamp},1`;
        localData[index] = updatedEntry;
        localStorage.setItem("waitingList", JSON.stringify(localData));
        // Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî Î∞è Ï†úÍ±∞
        button.disabled = true;
        button.style.opacity = "0.5";
        setTimeout(() => button.remove(), 300);

        console.log("üì§ ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°ÎêòÎäî Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏:", {
          room: roomNum,
          guests: guests,
          timestamp: timestamp
        });
        const query = new URLSearchParams({
          mode: "breakfastSubmit",
          callback: "handlePostResponse",
          room: roomNum,
          guests: guests,
          timestamp: timestamp
        });
        const jsonpScript = document.createElement("script");
        jsonpScript.src = `${SCRIPT_BASE_URL}?${query.toString()}`;
        document.body.appendChild(jsonpScript);
      }
    };

    const listContainer = document.getElementById("List");
    // Check for an existing button with the same room number before appending
    const existingButton = Array.from(listContainer.children).find(btn =>
      btn.textContent.startsWith(`${room}Âè∑`)
    );

    if (existingButton) {
      existingButton.textContent = `${room}Âè∑ ${guests}Âêç`;
    } else {
      listContainer.appendChild(button);
    }

    // --- localStorageÏóê Ï†ÄÏû• ---
    // Use updateLocalStorageEntry to update or add the entry for this room
    const formattedTime = getCurrentFormattedTime();
    updateLocalStorageEntry(room, guests, formattedTime, "0", null);

    document.getElementById("qrResult").value = "";
    document.getElementById("guestCountInput").value = "";
    document.getElementById("customPromptOverlay").style.display = "none";
    // Clear lastScannedText so the same QR can be scanned again
    lastScannedText = "";
    // Show confirmation message before restarting QR scanner
    showCustomAlert("„Çπ„Çø„ÉÉ„Éï„Åå„ÅäÂëº„Å≥„Åô„Çã„Åæ„Åß„ÄÅÂ∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ\nPlease wait until the staff calls you.");
    // Restart QR scanner after submitting guest count
    restartQrScanner();
  };

  window.closeCustomPrompt = function() {
    document.getElementById("customPromptOverlay").style.display = "none";
    document.getElementById("guestCountInput").value = "";
    // Clear lastScannedText so the same QR can be scanned again
    lastScannedText = "";
    restartQrScanner();
  };

  // ÌåùÏóÖ Ïô∏Î∂Ä ÌÑ∞Ïπò Ïãú Îã´Í∏∞ (cancel ÎèôÏûë Ïã§Ìñâ)
  const overlay = document.getElementById("customPromptOverlay");
  if (overlay) {
    overlay.addEventListener("click", function (e) {
      if (e.target === overlay) {
        window.closeCustomPrompt(); // Ïô∏Î∂Ä ÌÑ∞Ïπò Ïãú ÌåùÏóÖ Îã´Í∏∞
      }
    });
  }
});

window.handlePostResponse = function(response) {
  console.log("üì¶ ÏÑúÎ≤Ñ ÏùëÎãµ:", response); // ÏΩòÏÜîÏóê Ï∂úÎ†•
  restartQrScanner();
};